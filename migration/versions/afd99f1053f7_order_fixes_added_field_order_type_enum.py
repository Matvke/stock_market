"""Order fixes. Added field order_type [Enum]

Revision ID: afd99f1053f7
Revises: 98bd6c42ae93
Create Date: 2025-03-27 14:55:13.036091

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'afd99f1053f7'
down_revision: Union[str, None] = '98bd6c42ae93'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # 1. Создаём ENUM тип
    op.execute("CREATE TYPE orderenum AS ENUM ('LIMIT', 'MARKET')")
    
    # 2. Добавляем колонку БЕЗ NOT NULL ограничения сначала
    op.add_column('orders', sa.Column('order_type', sa.Enum('LIMIT', 'MARKET', name='orderenum'), nullable=True))
    
    # 3. Заполняем существующие записи значением 'LIMIT'
    op.execute("UPDATE orders SET order_type = 'LIMIT'")
    
    # 4. Теперь меняем колонку на NOT NULL
    op.alter_column('orders', 'order_type', nullable=False)
    
    # Остальные операции
    op.alter_column('orders', 'price',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_unique_constraint("orders_id", 'orders', ['id'])
    op.create_unique_constraint("transactions_id", 'transactions', ['id'])
    op.create_unique_constraint("users_id", 'users', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("users_id", 'users', type_='unique')
    op.drop_constraint("transactions_id", 'transactions', type_='unique')
    op.drop_constraint("orders_id", 'orders', type_='unique')
    op.alter_column('orders', 'price',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('orders', 'order_type')
    op.execute("DROP TYPE orderenum")   
    # ### end Alembic commands ###
